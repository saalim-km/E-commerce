<%- include('../auth/partials/header.ejs') %>

    <style>
        /* Basic Styles */
        .breadcrumbs {
            font-size: 14px;
            margin-bottom: 20px;
            color: #555;
        }

        .breadcrumbs a {
            text-decoration: none;
            color: #007bff;
        }

        .breadcrumbs a:hover {
            text-decoration: underline;
        }

        /* Filter button */
        .filter-btn {
            position: relative;
            background-color: #fff;
            border: 2px solid #000;
            padding: 10px 20px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .filter-btn:hover {
            background-color: #000;
            color: #fff;
        }

        .filter-popup {
            display: none;
            background-color: #fff;
            border: 1px solid #000;
            padding: 20px;
            margin-bottom: 30px;
        }

        .filter-popup label {
            font-weight: bold;
        }

        .filter-popup input,
        .filter-popup select {
            margin-bottom: 10px;
        }

        /* Product Grid */
        .product-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-top: 30px;
        }

        .product-item {
            text-align: center;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            border: solid 1px rgba(128, 128, 128, 0.316);
        }

        .product-item img {
            width: 100%;
            height: auto;
        }

        .product-item .product-name {
            margin-top: 10px;
            font-size: 18px;
        }

        .product-item .price {
            color: #888;
        }

        /* Hover effect */
        .add-to-cart-btn {
            position: absolute;
            bottom: -50px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #000;
            color: #fff;
            padding: 10px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .product-item:hover .add-to-cart-btn {
            bottom: 10px;
        }
        .price {
            color: black;
            font-size: 1.1em;
        }
    </style>
</head>

<body>

    <!-- Breadcrumbs -->

    <div class="d-flex flex-column ml-5">
        <div class="breadcrumbs ml-5 mt-5">
            <a class="text-dark" href="/">Home</a> / <a class="text-dark" href="/user/shop">Shop</a>
        </div>
    
        <!-- Filter Button -->
         <div class="ml-5">
            <button class="filter-btn" onclick="toggleFilter()">FILTER <i class="fas fa-filter"></i></button>    
         </div>
    </div>

    <div class="row container ml-5 mb-5">

            <div class="col-lg-6">
                <label for="search">Search Products:</label>
                <input type="text" id="search" class="form-control" placeholder="Search for products..." oninput="searchProduct()">
            </div>

            <div class="col-lg-6">
                <label for="sort">Sort By:</label>
                <select id="sort" class="form-select" onchange="sortProducts()">
                    <option value="default">Default</option>
                    <option value="price-low-high">Price: Low to High</option>
                    <option value="price-high-low">Price: High to Low</option>
                    <option value="name-az">Name: A - Z</option>
                    <option value="name-za">Name: Z - A</option>
                </select>
            </div>
    </div>
      
    <!-- Filter Popup -->
    <div class="filter-popup container" id="filter-popup">

        <!-- Category Filter -->
        <label for="category">Select Category:</label>
        <select id="category" class="form-select" onchange="filterProducts()">
            <option value="All Categories">All Categories</option>
            <option value="Glow in Dark">Glow in Dark</option>
            <option value="Full Printed TShirts">Full Printed TShirts</option>
            <option value="Oversized Fit">Oversized Fit</option>
            <option value="Hoodie UV Light Reactive">Hoodie UV Light Reactive</option>
        </select>
    </div>

    <!-- Sorting Dropdown -->
 

    <!-- Product Grid -->
    <div class="product-grid container">
        <% products.forEach((product)=> { %>
        <div class="product-item pb-2" data-name="<%= product.productName %>" data-category="<%= product.category.name %>" data-price="<%= product.salesPrice %>">
            <a href="/user/products/<%= product._id %>" style="text-decoration: none;">

                <img src="/uploads/product-images/<%= product.images[0] %>" alt="<%= product.productName %>">
                
                <div>
                    <h5 class="product-name"><%= product.productName %></h5>
                    <% if (product.salesPriceAfterDiscount && product.productOffer[0].offerStatus) { %>
                        <p class="price" style="color: black;">₹<%= product.salesPriceAfterDiscount%> <del style="color: gray;">₹<%= product.salesPrice%></del>  <span style="color: green; font-weight: 600;"> %<%= product.productOffer[0].discountPercentage %></span></p>
                    <% } else {%>
                        <p class="price" style="color: black;">₹<%= product.salesPrice%></p>
                    <% } %>
                    <p class="category">Category: <%= product.category.name %></p>
                    <a href="/user/products/<%= product._id %>" class="btn btn-primary mt-3">View Product</a>
                </div>
            </a>
        </div>
        <% }) %>
    </div>


    <script>
        // default order of products (if the user clicks on default on sort option
        const defaultOrder = Array.from(document.querySelectorAll('.product-item'));
        function toggleFilter() {
            const filterPopup = document.getElementById("filter-popup");
            if (filterPopup.style.display === "block") {
                filterPopup.style.display = "none";
            } else {
                filterPopup.style.display = "block";
            }
        }

        // filtering products based on categories or searc input
        function filterProducts(){
            const products = document.querySelectorAll('.product-item');
            const selectValue = document.getElementById('category').value;
            
            products.forEach((item)=> {
                if(selectValue == "All Categories"){
                    item.classList.remove("d-none");
                }else{
                    if(selectValue !== item.dataset.category){
                        item.classList.add("d-none");
                    }else{
                        item.classList.remove("d-none");
                    }
                }
            });
        }

        // sorting products
        function sortProducts(){
            const productGrid = document.querySelector('.product-grid');

            // calling the filterproducts for fetching the category it it is selected
            filterProducts();
            const sortValue = document.getElementById('sort').value;
            const products = document.querySelectorAll('.product-item');
            const productArr = Array.from(products);

            if(sortValue == 'default'){
                productGrid.innerHTML = "";
                defaultOrder.forEach((item)=> {
                    productGrid.appendChild(item);
                })
            }else if(sortValue == 'price-low-high'){
                productGrid.innerHTML = "";
                productArr.sort((a,b)=> {
                    return a.dataset.price - b.dataset.price;
                });
                productArr.forEach((item)=> {
                    productGrid.appendChild(item);
                })
            }else if(sortValue == 'price-high-low'){
                productGrid.innerHTML = "";
                productArr.sort((a,b)=> {
                    return b.dataset.price - a.dataset.price;
                });
                productArr.forEach((item)=> {
                    productGrid.appendChild(item);
                })
            }else if(sortValue == 'name-az'){
                productGrid.innerHTML = "";
                productArr.sort((a,b)=> {
                    return a.dataset.name.localeCompare(b.dataset.name);
                })
                productArr.forEach((item)=> {
                    productGrid.appendChild(item);
                })
            }else if(sortValue == 'name-za'){
                productGrid.innerHTML = "";
                productArr.sort((a,b)=> {
                    return b.dataset.name.localeCompare(a.dataset.name);
                })
                productArr.forEach((item)=> {
                    productGrid.appendChild(item);
                })
            }
            console.log(defaultOrder,productArr);
        }

        function searchProduct(){
            const products = document.querySelectorAll('.product-item');
            const searchValue = document.getElementById('search').value.toLowerCase();
            console.log(searchValue);

            products.forEach((item)=> {
                if(!item.dataset.name.toLowerCase().includes(searchValue)){
                    item.classList.add('d-none');
                }else {
                    item.classList.remove('d-none');
                }
            })
            
        }
    </script>

<%- include('../auth/partials/footer.ejs') %>
