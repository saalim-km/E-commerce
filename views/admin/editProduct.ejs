<%- include("./partials/header.ejs") %>
<style>
   .error-message {
   color: red;
   }
   .thumbnails-container {
   display: flex;
   overflow-x: auto;
   }
   .thumbnail {
   margin-right: 10px;
   }



.size-input-group label {
    font-size: 14px;
    font-weight: bold;
    display: inline;
}

.tiny-box {
    width: 50px;
    height: 35px;
    padding: 5px;
    font-size: 14px;
    text-align: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
}
</style>


<section class="content-main">
    <% if (message.success) { %>
     <div class="alert alert-success"><%= message.success %></div>
    <% } %>
    <% if (message.error) { %>
     <div class="alert alert-danger"><%= message.error %></div>
    <% } %>
   <div class="row">
      <div class="col-9">
         <div class="content-header">
            <h2 class="content-title">Edit Product</h2>
         </div>
      </div>
      <div class="col-lg-6">
         <div class="card mb-4">
            <div class="card-body">
               <form method="post" action="/admin/product/edit/<%= product._id%>" enctype="multipart/form-data" onsubmit="return validateForm(event)">
                  <div class="mb-4">
                     <label for="product_name" class="form-label">Product Name</label>
                     <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name" value="<%= product.productName %>">
                     <div id="productName-error" class="error-message"></div>
                  </div>
                  <div class="mb-4">
                     <label class="form-label">Full description</label>
                     <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"><%= product.description %></textarea>
                     <div id="description-error" class="error-message"></div>
                  </div>
                  <div class="row">
                     <div class="col-lg-4">
                        <div class="mb-4">
                           <label class="form-label">Regular price</label>
                           <input maxlength="4" placeholder="$" name="regularPrice" type="text" class="form-control border" value="<%= product.regularPrice %>" id="regular_price">
                           <div id="regularPrice-error" class="error-message"></div>
                        </div>
                     </div>
                     <div class="col-lg-4">
                        <div class="mb-4">
                           <label class="form-label">Sale price</label>
                           <input maxlength="4" placeholder="$" name="salesPrice" type="text" class="form-control border" value="<%= product.salesPrice %>" id="sales_price">
                        </div>
                        <div id="salePrice-error" class="error-message"></div>
                     </div>
                  </div>

                  <div class="card mb-4">
                    <div class="card-body">
                       <div class="row gx-2">
                          <div class="col-sm-6 mb-3">
                             <label class="form-label">Category</label>
                             <select class="form-select border" style="width: 150px;" name="category">
                                <% category.forEach(cat => { %>
                                   <option value="<%= cat.name %>" <%= productCat._id.equals(cat._id) ? 'selected' : '' %>>
                                      <%= cat.name %>
                                   </option>
                                <% }) %>
                             </select>
                             <div id="category-error" class="error-message"></div>
                          </div>
                       </div>
                    </div>
                 </div>
                 
                 <label class="mt-3" for="sizes">Sizes</label>
                  <div class="d-flex flex-row gap-4 align-item-center mb-4">
                    <% product.sizes.forEach(size => { %>
                      <div>
                        <label class="mr-5" for="size_<%= size.size.toLowerCase() %>"> <%= size.size %> </label>
                        <input type="number" name="<%= size.size.toLowerCase() %>" id="size_<%= size.size.toLowerCase() %>" min="0" class="tiny-box" value="<%= size.stock %>">
                      </div>
                      <small style="color: red;" id="size_<%= size.size.toLowerCase() %>-error" class="error-message"></small>
                    <% }) %>
                  </div>
  

            <p id = "error-message"></p>
                <div class="form-group">
                  <h3>Product Images</h3>
                  <div class="image-section" id="imageSection">
                    <% product.images.forEach((image, index) => { %>
                      <div class="image-container mb-2" id="image-container-<%= index %>">
                        <img src="/uploads/product-images/<%= image %>" alt="Product Image" class="img-thumbnail" style="max-width: 150px; max-height: 150px;">
                        <button type="button" class="btn btn-danger mt-2" onclick="removeImage('<%- image %>', <%= index %>)">Remove</button>
                        <input type="hidden" name="existingImages[]" value="<%= image %>">
                      </div>
                    <% }) %>
                  </div>
                  <div>
                    <button class="btn btn-md rounded font-sm hover-up" type="submit">Update</button>
                    <a href="/admin/products" class="btn btn-secondary rounder font-sm hover-up">Cancel</a>
                  </div>
                </div>
            </form>
         </div>
      </div>
   </div>
   </div>
</section>



<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>



<script>
  checkImageCount();
function removeImage(imageName, index) {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!"
    }).then((result) => {
      if (result.isConfirmed) {
        const productId = "<%= product._id %>";
        $.ajax({
          url: '/admin/product/remove-image',
          type: 'POST',
          data: JSON.stringify({
            productId: productId,
            imageName: imageName
          }),
          contentType: 'application/json',
          success: function(response) {
            if (response.success) {
              Swal.fire({
                title: "Deleted!",
                text: "Image has been deleted.",
                icon: "success"
              });
              const imageContainer = document.getElementById(`image-container-${index}`);
              imageContainer.remove();
              addNewImageInput(index);
            } else {
              alert("Error removing image: " + response.message);
            }
          },
          error: function(error) {
            console.error("AJAX error:", error);
            alert("An error occurred while trying to remove the image.");
          }
        });
      }
    });
  }

function checkImageCount() {
  const imageSection = document.getElementById("imageSection");
  const images = imageSection.getElementsByClassName("image-container");  
    if(images.length == 3){
      return;
    }else{
      if (images.length == 2) {
      addNewImageInput(2);
    }else {
      if (images.length == 1) {
        addNewImageInput(1);
        addNewImageInput(2);
      }else {
        addNewImageInput(0);
        addNewImageInput(1);
        addNewImageInput(2);
      }
    }
    }
}


function addNewImageInput(index) {
    const newImageInput = document.createElement('div');
    newImageInput.innerHTML = `
      <div class="card mb-2">
        <div class="card-header">
          <h4>Choose images</h4>
          <p class="img-error" id="img-error${index + 1}"></p>
        </div>
        <div class="card-body align-items-center" style="margin-bottom: 20px;">
          <img src="" alt="" id="imgView${index + 1}">
          <input class="form-control img-input" type="file" name="images" id="input${index + 1}" accept="image/png, image/jpeg, image/jpg" onchange="viewImage${index + 1}(event), viewImage(event, ${index + 1})">
        </div>
        <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
           <img src="" id="croppedImg${index + 1}" alt="">
           <button type="button" id="saveButton${index + 1}" class="btn-sm btn-primary">Save</button>
        </div>
      </div>
    `;
    document.getElementById('imageSection').appendChild(newImageInput);
}


function viewImage1(){
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0]);
    } 

function viewImage2(){
        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
    }

function viewImage3(){
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
    }

function viewImage(event, index) {
    let input = event.target;
    let reader = new FileReader();

    reader.onload = function() {
        let dataURL = reader.result;
        let image = document.getElementById("imgView" + index);
        image.src = dataURL;

        // Create a new Cropper instance
        let cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });

        // Display cropper container
        let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
        cropperContainer.style.display = 'block';

        let saveButton = document.querySelector("#saveButton" + index);
        saveButton.addEventListener("click", async function() {
            let croppedCanvas = cropper.getCroppedCanvas();
            let croppedImage = document.getElementById("croppedImg" + index);
            croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

            // Fix: Ensure timestamp generation is called correctly
            let timestamp = new Date().getTime();
            let fileName = `cropper-img-${timestamp}-${index}.png`;

            await croppedCanvas.toBlob(blob => {
                let input = document.getElementById("input" + index);
                let imgFile = new File([blob], fileName, { type: blob.type });
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;
            });

            // Hide the cropper container and destroy the cropper instance
            cropperContainer.style.display = 'none';
            cropper.destroy();
        });
    };

    reader.readAsDataURL(input.files[0]);
}



const seletectedImages = [];
document.getElementById("input1").addEventListener("change",handleFileSelect);

function handleFileSelect(event){
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        addedImagesContainer.innerHTML = "";
        const files = event.target.files;
        for(let i=0;i<files.length;i++){
            let file = files[i];
            seletectedImages.push(file);
            let thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail");

            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";
            img.style.width = "50px";
            img.style.height="auto";
            const removeIcon = document.createElement("span");
            removeIcon.classList.add("remove-icon");
            removeIcon.innerHTML = "&times;"
            removeIcon.addEventListener("click",()=> {
                const index = seletectedImages.indexOf(file);
                if(index!==-1){
                    seletectedImages.splice(index,1);
                }
                thumbnail.remove();
            });


            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
}



function validateForm(e) {
  // error display elements
    const nError = document.getElementById('productName-error');
    const dError = document.getElementById('description-error');
    const rpgError = document.getElementById('regularPrice-error');
    const spError = document.getElementById('salePrice-error');

    // values
    const productName = document.getElementById('product_name').value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const regularPrice = document.getElementById('regular_price').value.trim();
    const salesPrice = document.getElementById('sales_price').value.trim();
    const sizeInputs = document.querySelectorAll('.tiny-box');
    const images = document.querySelectorAll('.img-input'); // All image input fields
    const errorImg = document.getElementById('error-message'); // General error message element
    const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];

    // flag
    let formValid = true;


    nError.textContent = "";
    dError.textContent = "";
    rpgError.textContent = "";
    spError.textContent = "";
    errorImg.textContent = "";

    sizeInputs.forEach(input => {
    const errorElement = document.getElementById(`${input.id}-error`);
    if (errorElement) {
      errorElement.textContent = '';
    }
    });

    sizeInputs.forEach(input => {
    const sizeValue = input.value.trim();
    if (!/^\d+$/.test(sizeValue) || parseInt(sizeValue) <= 0) {
      const errorElement = document.getElementById(`${input.id}-error`);
      if (errorElement) {
        errorElement.textContent = "Stock must be greater than zero.";
      }
      formValid = false; 
    }
  });


    if(productName === ""){
      nError.textContent = "name cannot be empty";
      nError.style.color = "red";
      formValid = false;
    }

    if(!/^[A-Za-z\s]+$/.test(productName)) {
      nError.textContent = "Product name should only contain alphabets and spaces";
      nError.style.color = "red";
      formValid = false;
    }

    if(description === ""){
      dError.textContent = "description cannot be empty";
      dError.style.color = "red";
      formValid = false;
    }

    if(!/^[A-Za-z\s]+$/.test(description)){
      dError.textContent = "Description should only contain alphabets and spaces";
      dError.style.color = "red";
      formValid = false;
    }

    if (!/^\d+$/.test(regularPrice) || parseInt(regularPrice) < 500) {
    rpgError.textContent = 'Please enter a valid price of at least 500 (no decimals allowed).';
    formValid = false;
    }

    if (!/^\d+$/.test(salesPrice) || parseInt(salesPrice) < 500) {
      spError.textContent = 'Please enter a valid sale price of at least 500 (no decimals allowed).';
      formValid = false;
   }

   if (parseFloat(regularPrice) <= parseFloat(salesPrice)) {
        rpgError.textContent = 'Regular price must be greater than sale price.';
        formValid = false;
    }

    // Check each image input
    for (let i = 0; i < images.length; i++) {
        const file = images[i].files[0];
        
        // Check if an image is selected
        if (!file) {
            errorImg.innerText = 'You must upload exactly 3 images.';
            errorImg.style.color = "red";
            return false; // Stop form submission if an image is missing
        }

        if (!validImageTypes.includes(file.type)) {
            errorImg.innerText = 'Invalid file type. Only JPEG, PNG, or JPG are allowed.';
            errorImg.style.color = "red";
            return false; // Stop form submission if the image type is invalid
        }

    }

    return formValid;
}


</script>
     
<%- include("./partials/footer.ejs") %>
