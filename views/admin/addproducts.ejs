<%- include("./partials/header.ejs") %>
<style>
   .error-message {
   color: red;
   }
   .thumbnails-container {
   display: flex;
   overflow-x: auto;
   }
   .thumbnail {
   margin-right: 10px;
   }



.size-input-group label {
    font-size: 14px;
    font-weight: bold;
    display: inline;
}

.tiny-box {
    width: 50px;
    height: 35px;
    padding: 5px;
    font-size: 14px;
    text-align: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
}
</style>


<section class="content-main">
    <% if (message.success) { %>
     <div class="alert alert-success"><%= message.success %></div>
    <% } %>
    <% if (message.error) { %>
     <div class="alert alert-danger"><%= message.error %></div>
    <% } %>
   <div class="row">
      <div class="col-9">
         <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
         </div>
      </div>
      <div class="col-lg-6">
         <div class="card mb-4">
            <div class="card-body">
               <form method="post" action="/admin/addproducts" enctype="multipart/form-data" onsubmit="return validateForm()">
                  <div class="mb-4">
                     <label for="product_name" class="form-label">Product Name</label>
                     <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                     <div id="productName-error" class="error-message"></div>
                  </div>
                  <div class="mb-4">
                     <label class="form-label">Full description</label>
                     <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                     <div id="description-error" class="error-message"></div>
                  </div>
                  <div class="row">
                     <div class="col-lg-4">
                        <div class="mb-4">
                           <label class="form-label">Sale price</label>
                           <input maxlength="4" placeholder="$" name="salesPrice" type="text" class="form-control border">
                        </div>
                        <div id="salePrice-error" class="error-message"></div>
                     </div>
                  </div>
                  <div class="card mb-4">
                     <div class="card-body">
                        <div class="row gx-2">
                           <div class="col-sm-6 mb-3">
                              <label class="form-label">Category</label>
                              <select class="form-select border" style="width: 150px;" name="category">
                                <% category.forEach(cat => { %>
                                    <option value="<%= cat.name %>">
                                        <%= cat.name %>
                                    </option>
                                <% }) %>
                              </select>
                              <div id="category-error" class="error-message"></div>
                           </div>
                        </div>
                     </div>
                  </div>

                  <div class="product-form mb-3">
                     <div class="d-flex flex-row gap-4 align-item-center">
                         <div>
                             <label class="mr-5" for="size_s">S</label>
                             <input type="text" name="sizes[s]" id="size_s" min="0" maxlength="2" class="tiny-box">
                             <div id="size_s-error" class="error-message"></div>
                         </div>
                         <div>
                             <label class="mr-5" for="size_m">M</label>
                             <input type="text" name="sizes[m]" id="size_m" min="0" maxlength="2" class="tiny-box">
                             <div id="size_m-error" class="error-message"></div>
                         </div>
                         <div>
                             <label class="mr-5" for="size_l">L</label>
                             <input type="text" name="sizes[l]" id="size_l" min="0" maxlength="2" class="tiny-box">
                             <div id="size_l-error" class="error-message"></div>
                         </div>
                         <div>
                             <label class="mr-5" for="size_xl">XL</label>
                             <input type="text" name="sizes[xl]" id="size_xl" min="0" maxlength="2" class="tiny-box">
                             <div id="size_xl-error" class="error-message"></div>
                         </div>
                     </div>
                 </div>
                 


                  <div class="card mb-2">
                     <!-- selecting images -->
                     <div class="card-header">
                        <h4>Choose images</h4>
                     </div>
                     <div class="border row">
                        <div id="addedImagesContainer" class="thumbnails-container"></div>
                     </div>

                    <div class="row">
                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                           <img src="" alt="" id="imgView1">
                           <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg" onchange="viewImage1(event), viewImage(event, 1)">
                           <div id="images-error" class="error-message"></div>
                        </div>
                        <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                           <img src="" id="croppedImg1" alt="">
                           <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                           <img src="" alt="" id="imgView2">
                           <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg" onchange="viewImage2(event),viewImage(event, 2)">
                        </div>
                        <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                           <img src="" id="croppedImg2" alt="">
                           <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                        </div>
                    </div>

                    <div class="row">
                        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                           <img src="" alt="" id="imgView3">
                           <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg" onchange="viewImage3(event),viewImage(event, 3)">
                        </div>
                        <div class="image-cropper d-flex align-items-center" style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                           <img src="" id="croppedImg3" alt="">
                           <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                        </div>
                    </div>
                </div>
            </div>
            <div>
            <button class="btn btn-md rounded font-sm hover-up" type="submit">Publish</button>
            </div>
            </form>
         </div>
      </div>
   </div>
   </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>



<script>

    function viewImage1(){
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0]);
    } 

    function viewImage2(){
        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage3(){
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0]);
    }

    function viewImage(event, index) {
    let input = event.target;
    let reader = new FileReader();

    reader.onload = function() {
        let dataURL = reader.result;
        let image = document.getElementById("imgView" + index);
        image.src = dataURL;

        // Create a new Cropper instance
        let cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true
        });

        // Display cropper container
        let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
        cropperContainer.style.display = 'block';

        let saveButton = document.querySelector("#saveButton" + index);
        saveButton.addEventListener("click", async function() {
            let croppedCanvas = cropper.getCroppedCanvas();
            let croppedImage = document.getElementById("croppedImg" + index);
            croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

            // Fix: Ensure timestamp generation is called correctly
            let timestamp = new Date().getTime();
            let fileName = `cropper-img-${timestamp}-${index}.png`;

            await croppedCanvas.toBlob(blob => {
                let input = document.getElementById("input" + index);
                let imgFile = new File([blob], fileName, { type: blob.type });
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;
            });

            // Hide the cropper container and destroy the cropper instance
            cropperContainer.style.display = 'none';
            cropper.destroy();
        });
    };

    reader.readAsDataURL(input.files[0]);
}



    const seletectedImages = [];
    document.getElementById("input1").addEventListener("change",handleFileSelect);

    function handleFileSelect(event){
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        addedImagesContainer.innerHTML = "";
        const files = event.target.files;
        for(let i=0;i<files.length;i++){
            let file = files[i];
            seletectedImages.push(file);
            let thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail");

            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";
            img.style.width = "50px";
            img.style.height="auto";
            const removeIcon = document.createElement("span");
            removeIcon.classList.add("remove-icon");
            removeIcon.innerHTML = "&times;"
            removeIcon.addEventListener("click",()=> {
                const index = seletectedImages.indexOf(file);
                if(index!==-1){
                    seletectedImages.splice(index,1);
                }
                thumbnail.remove();
            });


            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
    }









    function validateForm() {
    clearErrorMessages();
    
    const name = document.getElementsByName('productName')[0].value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const saleprice = document.getElementsByName('salesPrice')[0].value.trim();
    const category = document.getElementsByName('category')[0].value.trim();
    
    const sizes = {
        s: document.getElementById('size_s').value.trim(),
        m: document.getElementById('size_m').value.trim(),
        l: document.getElementById('size_l').value.trim(),
        xl: document.getElementById('size_xl').value.trim(),
    };
    const images = [
        document.getElementById('input1').files[0],
        document.getElementById('input2').files[0],
        document.getElementById('input3').files[0]
    ];

    let isValid = true;

    // Validate product name (alphabets and spaces only, no empty input)
    if (!/^[A-Za-z0-9\s\W]+$/.test(name)) {
        displayErrorMessage('productName-error', 'Product name should only contain alphabets, numbers, and special characters.');
        isValid = false;
    }

    // Validate description (alphabets, numbers, and spaces only, no empty input)
    if (!/^[A-Za-z0-9\s\W]+$/.test(description)) {
    displayErrorMessage('description-error', 'Description should only contain alphabets, numbers, and special characters.');
    isValid = false;
}

   // Validate sale price (must be a whole number, at least 500, and not empty)
   if (!/^\d+$/.test(saleprice) || parseInt(saleprice) < 500) {
      displayErrorMessage('salePrice-error', 'Please enter a valid sale price of at least 500 (no decimals allowed).');
      isValid = false;
   }


    for (let size in sizes) {
    // Ensure stock for sizes contains only numbers and is greater than zero
    if (!/^\d+$/.test(sizes[size]) || parseInt(sizes[size]) <= 0) {
        displayErrorMessage('size_' + size + '-error', `Stock for size ${size.toUpperCase()} must be a valid number greater than zero.`);
        isValid = false;
    }
    }

    // Validate images (ensure 3 images are uploaded and they are of correct type)
    if (images.some(image => !validateImageType(image))) {
        displayErrorMessage('images-error', 'Please upload 3 images (JPEG, PNG, JPG only).');
        isValid = false;
    }

    return isValid;
}

// Function to validate image file type
function validateImageType(file) {
    if (!file) return false;  // Ensure file is selected
    const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];
    return validImageTypes.includes(file.type);
}

// Function to display error messages
function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

// Function to clear all error messages before validation
function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = 'none';
    });
}

</script>
     
<%- include("./partials/footer.ejs") %>



